import json
import subprocess
from pathlib import Path
from cve_bin_tool.parsers import Parser
from cve_bin_tool.util import ProductInfo, ScanInfo

class PhpParser(Parser):
    def __init__(self, cve_db, logger):
        super().__init__(cve_db, logger)
    
    def find_vendor(self, product, version):
        vendor_package_pair = self.cve_db.get_vendor_product_pairs(product)
        file_path = self.filename
        if vendor_package_pair != []:
            vendor = vendor_package_pair[0]["vendor"]
            self.logger.info(f"{file_path} is {product} {version}")
            return ScanInfo(ProductInfo(vendor, product, version), file_path)
        else:
            self.logger.info(f"{product} {version} did not match any product/version")
        return None

    def run_checker(self, filename):
        self.filename = filename
        parentDir = Path(filename).parent
        data = json.loads(
            subprocess.check_output(
                [
                    "composer",
                    "show",
                    "--format=json",
                    f"--working-dir={parentDir}",
                ]
            )
        )
        for d in data['installed']:
            product = d['name'].split('/')[-1]
            version = d['version'].split('v')[-1]
            vendor = self.find_vendor(product, version)
            if vendor is not None:
                yield vendor
        self.logger.debug(f"Done scanning file: {self.filename}")

